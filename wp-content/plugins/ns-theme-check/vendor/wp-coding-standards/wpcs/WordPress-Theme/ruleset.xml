<?xml version="1.0"?>
<ruleset name="WordPress Theme">
	<!-- For more information: https://make.wordpress.org/themes/handbook/review/ -->
	<description>Standards any Theme to be published on wordpress.org should comply with.</description>

	<rule ref="WordPress.Theme"/>

	<!-- No PHP short open tags allowed. -->
	<!-- Covers: https://github.com/Otto42/theme-check/blob/master/checks/phpshort.php -->
	<rule ref="Generic.PHP.DisallowShortOpenTag"/>

	<!-- Alternative PHP open tags not allowed. -->
	<rule ref="Generic.PHP.DisallowAlternativePHPTags"/>

	<!-- Mixed line endings are not allowed. -->
	<!-- Covers: https://github.com/Otto42/theme-check/blob/master/checks/lineendings.php -->
	<rule ref="Internal.LineEndings.Mixed">
		<type>error</type>
	</rule>

	<!-- No minification of scripts or files unless you provide original files. -->
	<!-- Covers: https://make.wordpress.org/themes/handbook/review/required/#stylesheets-and-scripts -->
	<rule ref="Internal.Tokenizer.Exception">
		<message>File appears to be minified and cannot be processed. The non-minified file must be included too.</message>
	</rule>

	<!-- No ByteOrderMark allowed - important to prevent issues with content being sent before headers. -->
	<rule ref="Generic.Files.ByteOrderMark"/>

	<!-- No removal of the admin bar allowed -->
	<!-- Covers: https://github.com/wordpress/theme-check/blob/master/checks/adminbar.php -->
	<rule ref="WordPress.VIP.AdminBarRemoval">
		<properties>
			<property name="remove_only" value="false"/>
		</properties>
	</rule>

	<!-- Check that the I18N functions are used correctly. -->
	<!-- This sniff can also check the text domain, provided it's passed to PHPCS. -->
	<rule ref="WordPress.WP.I18n"/>

	<!-- No hard coding of scripts and styles. Everything should be enqueued. -->
	<rule ref="WordPress.WP.EnqueuedResources"/>

	<!-- Prevent path disclosure when using add_theme_page(). -->
	<rule ref="WordPress.VIP.PluginMenuSlug"/>

	<!-- Do not silence error notices. e.g. Error Control Operator @.. -->
	<rule ref="Generic.PHP.NoSilencedErrors">
		<properties>
			<property name="error" value="true"/>
		</properties>
	</rule>

	<!-- Validate and/or sanitize untrusted data before entering into the database. -->
	<!--
		Revert to changing the type at the sniff level instead of the error code level
		once the PR has been merged and the miminmum PHPCS version has been increased.
		https://github.com/squizlabs/PHP_CodeSniffer/pull/1247
	-->
	<rule ref="WordPress.VIP.ValidatedSanitizedInput.InputNotValidated">
		<type>warning</type>
	</rule>
	<rule ref="WordPress.VIP.ValidatedSanitizedInput.InputNotSanitized">
		<type>warning</type>
	</rule>
	<rule ref="WordPress.VIP.ValidatedSanitizedInput.InputNotValidatedNotSanitized">
		<type>warning</type>
	</rule>
	<rule ref="WordPress.VIP.ValidatedSanitizedInput.MissingUnslash">
		<type>warning</type>
	</rule>

	<!-- All untrusted data should be escaped before output. -->
	<!--
		Revert to changing the type at the sniff level instead of the error code level
		once the PR has been merged and the miminmum PHPCS version has been increased.
		https://github.com/squizlabs/PHP_CodeSniffer/pull/1247
	-->
	<rule ref="WordPress.XSS.EscapeOutput.UnsafePrintingFunction">
		<type>warning</type>
	</rule>
	<rule ref="WordPress.XSS.EscapeOutput.OutputNotEscaped">
		<type>warning</type>
	</rule>

	<!-- Prohibit the use of the backtick operator. -->
	<rule ref="Generic.PHP.BacktickOperator"/>

	<!-- Prohibit overwriting of WordPress global variables. -->
	<rule ref="WordPress.Variables.GlobalVariables"/>

	<!-- Prohibit the use of the eval() PHP language construct. -->
	<rule ref="Squiz.PHP.Eval"/>
	<rule ref="Squiz.PHP.Eval.Discouraged">
		<type>error</type>
		<message>eval() is a security risk so not allowed.</message>
	</rule>

	<!-- Check for deprecated WordPress functions. -->
	<rule ref="WordPress.WP.DeprecatedFunctions"/>

</ruleset>
